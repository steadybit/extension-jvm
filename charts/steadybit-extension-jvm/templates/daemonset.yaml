apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "extensionlib.names.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
  {{- range $key, $value := .Values.extraLabels }}
    {{ $key }}: {{ $value }}
  {{- end }}
  {{- include "extensionlib.labels" (list .) | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "extensionlib.names.name" . }}
      app: {{ include "extensionlib.names.name" . }}
  updateStrategy:
    # updateStrategy.type -- Specifies the strategy used to replace old Pods by new ones.
    type: RollingUpdate
    rollingUpdate:
      # updateStrategy.rollingUpdate.maxSurge -- The maximum number of DaemonSet pods that can be unavailable during the update.
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "extensionlib.names.name" . }}
        app: {{ include "extensionlib.names.name" . }}
        {{- include "extensionlib.labels" (list .) | nindent 8 }}
        {{- range $key, $value := .Values.extraLabels }}
        {{ $key }}: {{ $value }}
        {{- end }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        "container.apparmor.security.beta.kubernetes.io/{{ include "extensionlib.names.name" . }}": unconfined
        {{- include "extensionlib.annotation" (list . .Values.containerPorts.http (list "ACTION" "DISCOVERY" "ADVICE") ) | nindent 8 }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - image: {{ .Values.image.name }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            requests:
              memory: {{ .Values.resources.requests.memory }}
              cpu: {{ .Values.resources.requests.cpu }}
            limits:
              memory: {{ .Values.resources.limits.memory }}
              cpu: {{ .Values.resources.limits.cpu }}
          name: {{ include "extensionlib.names.name" . }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPorts.http }}
            - name: health
              containerPort: {{ .Values.containerPorts.health }}
          env:
            - name: STEADYBIT_EXTENSION_PORT
              value: {{ .Values.containerPorts.http | quote }}
            - name: STEADYBIT_EXTENSION_HEALTH_PORT
              value: {{ .Values.containerPorts.health | quote }}
            {{- if .Values.discovery.attributes.excludes.jvm }}
            - name: STEADYBIT_EXTENSION_DISCOVERY_ATTRIBUTES_EXCLUDES_JVM
              value: {{ join "," .Values.discovery.attributes.excludes.jvm | quote }}
            {{- end }}
            {{- include "extensionlib.deployment.env" (list .) | nindent 12 }}
            {{- with .Values.extraEnv }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.extraEnvFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: tmp-dir
              mountPath: /tmp
            - name: cgroup-root
              mountPath: /sys/fs/cgroup
                  {{- include "containerRuntime.volumeMounts" . | nindent 12 }}
                  {{- include "extensionlib.deployment.volumeMounts" (list .) | nindent 12 }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            httpGet:
              path: /health/liveness
              port: {{ .Values.containerPorts.health }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            httpGet:
              path: /health/readiness
              port: {{ .Values.containerPorts.health }}
          securityContext:
            seccompProfile:
              type: Unconfined
            capabilities:
              add: {{ toJson .Values.securityContext.capabilities.add }}
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10000
            runAsGroup: 10000
      volumes:
        - name: tmp-dir
          emptyDir: { }
        - name: cgroup-root
          hostPath:
            path: /sys/fs/cgroup
            type: Directory
            {{- include "containerRuntime.volumes" . | nindent 8 }}
            {{- include "extensionlib.deployment.volumes" (list .) | nindent 8 }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
          {{- with .Values.nodeSelector }}
      nodeSelector:
          {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- with .Values.affinity }}
      affinity:
          {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- with .Values.tolerations }}
      tolerations:
          {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
          {{- toYaml . | nindent 8 }}
          {{- end }}
